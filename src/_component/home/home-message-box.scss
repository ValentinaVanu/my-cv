//- CSS TRICK - part 2
//- This trick works by making use of the change state
//- of the input type radio and the next sibling CSS selector"+"
//- Example:
//-   This will target all unchecked input elements with class .my-input
//-   .my-input { margin-left: 10px; }
//-   This will target all checked input elements with class .my-input
//-   .my-input:checked { margin-left: 20px; }
//- input type radio elements can be gouped by using
//- the name attribute with the same value, thus ensuring
//- only one input can be checked at one time
//- HTML example of an ipmut and it s siblings
//-   <input type="radio" id="myCustomUniqueId" />
//-   <p>Lable text</p>
//-   #myCustonUniqueId:checked + p { color:blue }
//- The example above will make the text content inside the paragraph
//- tag of color blue when the input #myCustomUniqueId is Checked.
//-
//- Summary:
//- 1. The label linked to the input chamges the state of
//- the input when clicked
//- 2. The next sibling of the input can be targeted with
//- diffrent CSS rules based on the checked state of the input

$class: 'home-message';

.#{$class} {
  // Set the .home-message text colour to white
  // to increase readability
  color: $color-white;
}

.#{$class} {
  // Set the .home-message text color to white
  // to increase readablility
  color: $color-white;
}

.#{$class}-radio + .#{$class} {
  // Hide all .home-message that follows as sibling
  // an input type radio with checked state as false
  display: none;
}

#message-default.#{$class}-radio:checked + .#{$class} + .#{$class}-bpx-header {
  // Hide all /home-message that follows as sibling
  // an input type radio with checked state as fales
  display: none;
}

.#{$class}-radio:checked + .#{$class}{
  // Change display state of the .home-message from
  // hidden to show based on the checked state true
  // of the input type radio
  display: inherit;
}

// Hide the input type radio elements to clean interface
input.#{class}-radio[type=radio] {
  display: none;
}

// Create a rounded corner rectangle
.#{$class}-body {
  // That doesnt break a new line
  display: inline-block;

  // With white border
  border:0.2rem solid $color-white;
  // That has rounded corners
  border-radius: 0.5rem;
  // and enough clear space between border and text content
  padding: 0.8rem;
  // and enough space on top of it away from social box
  margin-top: 0.5rem;

  // Set the position to relative so the child(ren) that have
  // position: absolute will be bound to this container
  position: relative;
}

// Hide the input type radio elements
.#{$class}-link,
.#{$class}-link:visited {
  font-size: 1.4rem;
  // Remove the default underline in anchor tags
  text-decoration: none;
//  and set the color to white
  color: $color-white;
}

// Make use of the position relative and position: absolute CSS trick
// This box will look for the first parent that has position relative
// or absolute and be bound to it. It'll look from the first parent.
// going up until it reaches the bosy. If none os found it stops at body.
// Once it finds it, its top. bottoms. left and right will be influenced
// by the box of the parent it found and binded to it.
// Imagine this box:
// ------------------------------------------------------
// | <div style="position: absolute"></div>
// ------------------------------------------------------
// The div inside the box will be trapped inside those borders
// unless negative top, bottom, left and right will be specified.
.#{$class}-box-header {
  // This position absolute goes hand in hadn with position relativve
  // of the first found parent
  position: absolute;
  // and this width is set to 80% of the parent container
  // 100%-10%-10%=80%
  left: 10%;
  right: 10%;
  // and it'll be positioned starting at the bottom of the parent container
  // since top: 100% will move it away from the top towards the bottom
  // by 100% height of the parent
  top: 100%;

  // Display flex will make the content behave like inline elements
  display: flex;
  // and set the corners to be rounded, just the bottom left and right ones.
  border-bottom-right-radius: 0.5rem;
  border-bottom-left-radius: 0.5rem;
}

.#{$class}-box-close,
.#{$class}-box-info {
  @extend %noselect;

  // set-some distance between text and borders
  // to make the text more readable
  padding: 0.4rem;
  // and set the background to white
  background-color: $color-white;
}

.#{$class}-box-info {
  // strech this box to the available width
  width: 100%;
  // and set the bottom left corner to be rounded
  border-bottom-left-radius: 0.4rem;

  // and don-t allow text to break on new line
  white-space: nowrap;
  // and hide the text that flows outside the available width
  overflow-x: hidden;
  //  and display three dots to let the user know there is more hidden content
  text-overflow: ellipsis;
  // set text to be centered vertically in its container using line-height
  line-height: 1.5rem;
}

// Since we are using position absolute for the home-message-box-header,
// this means the element is behaving like it's no longer present in the
// dom. so the parent container no longer knows about it and finishes
// the vertical height a bit earlier, the result looks like the box bleeds
// into the next section:
// -- Parent container -----------------
// |                                   |
// |   --- Child pos: absolute ---     |
// |   |                         |     |
// ----|-------------------------|------
// -- Next container (section)---|------
// |   |                         |     |
// |   |                         |     |
// |   ---------------------------     |
// |                                   |
// By using the margin bottom we move the parent container
// bottom so the .home-message-box-header looks visually that
// It's inside the parent container
.#{$class}-box {
  margin-bottom: 3rem;
}

.#{$class}-box-close {
  // Match the parent container round corner
  // and use a smaller value to reduce bleeding
  border-bottom-right-radius: 0.4rem;
  // Set the cursor to pointer so descktop users
  // will see a hand that suggests interaction
  cursor: pointer;

  // Make the action call area (the area that you can tap/click)
  // bigger to increase usability
  width: 2.5rem;
  font-size: 1.5rem;
}
